openapi: 3.0.0
info:
  version: 1.0.0
  title: MTAA API

tags:
  - name: User
  - name: Accommodations

paths:
  /user/logout/:
    post:
      tags:
        - User
      summary: User logout
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/login/:
    post:
      tags:
        - User
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/register/:
    post:
      tags:
        - User
      summary: User register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /user/{id}:
    get:
      tags:
        - User
      summary: Get user information
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags:
        - User
      summary: Update user information
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
    delete:
      tags:
        - User
      summary: Delete user
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
  /user/{id}/orders/:
    get:
      tags:
        - User
      summary: Get all orders by user
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /user/{id}/orders/{order_id}/:
    get:
      tags:
        - User
      summary: Get order by id
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
        - in: path
          name: order_id
          description: Order uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags:
        - User
      summary: Update order with id
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
        - in: path
          name: order_id
          description: Order uuid
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accommodation:
                  type: string
                booking:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags:
        - User
      summary: delete order
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
        - in: path
          name: order_id
          description: Order uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
  /user/{id}/orders/{acc_id}/:
    post:
      tags:
        - User
      summary: Create order with accommodation
      parameters:
        - in: path
          name: id
          description: user uuid
          schema:
            type: string
          required: true
        - in: path
          name: acc_id
          description: Accommodation uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
    
  /accommodation/:
    get:
      tags:
        - Accommodations
      summary: Returns list of filtered accommodations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accommodation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /accommodation/{id}/:
    get:
      tags:
        - Accommodations
      summary: Gets informations about accommodation by id
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
          
  
          
  /accommodation/{id}/rating/:
    post:
      tags:
        - Accommodations
      summary: Gets calendar availability for current availability in date span
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Accommodations
      summary: Gets calendar availability for current availability in date span
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /accommodation/{id}/rating-reply/:
    post:
      tags:
        - Accommodations
      summary: Gets calendar availability for current availability in date span
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdValue'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Accommodations
      summary: Gets calendar availability for current availability in date span
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdValue'
      
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    

    
  /accommodation/{id}/rating-reply/{reply_id}/:
    delete:
      tags:
        - Accommodations
      summary: Gets calendar availability for current availability in date span
      parameters:
        - in: path
          name: id
          description: Order uuid
          schema:
            type: string
          required: true
        - in: path
          name: reply_id
          description: Reply uuid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
 
components:
  securitySchemes:
    JwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    OK:
      description: OK
    Created:
      description: Resource created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdValue'
    BadRequest:
      description: 'Bad request: The server could not understand the request due to invalid syntax'
    NotFound:
      description: The specified resource was not found
    Conflict:
      description: Request conflicts with current state of the target resource.
    InternalError:
      description: Internal server error


  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
        state:
          type: string
        accommodation:
          $ref: '#/components/schemas/Accommodation'
        occupant_count:
          type: integer


    Accommodation:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        location:
          $ref: '#/components/schemas/Location'
        occupant_count:
          type: integer
        rating:
          type: object
          properties:
            average:
              type: number
            count:
              type: integer
            ratings:
              type: array
              items:
                $ref: '#/components/schemas/Rating'

    Location:
      type: object
      properties:
        id:
          type: string
        address:
          type: string

    Filter:
      type: object
      properties:
        locationId:
          type: string
        occupants:
          type: integer


    User:
      type: object
      properties:
        isTemporary:
          type: boolean
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        gender:
          type: integer
        addressStreet:
          type: string
        addressStreetNumber:
          type: string
        addressCity:
          type: string
        addressPostalCode:
          type: string
        addressCountry:
          type: string

    Rating:
      type: object
      properties:
        id:
          type: string
        author:
          $ref: '#/components/schemas/User'
        rating:
          type: integer
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/RatingReply'
                
    RatingReply:
      type: object
      properties:
        id:
          type: string
        author:
          $ref: '#/components/schemas/User'
        rating:
          type: integer
        content:
          type: string
        createdAt:
          type: string

    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    AuthToken:
      type: object
      properties:
        token:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        userId:
          type: string
        expiresAt:
          type: number

    IdValue:
      type: object
      properties:
        id:
          type: string

servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/cugi143/MTAA/1.0.0
  - url: 'http://127.0.0.1:8000'